generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String               @id @default(cuid())
  auth0Id             String?              @unique
  name                String
  email               String               @unique
  emailVerified       DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  activityLogs        ActivityLog[]
  createdAssignments  Assignment[]         @relation("CreatedBy")
  comments            Comment[]
  createdCourses      Course[]             @relation("CreatedBy")
  enrollments         CourseEnrollment[]
  grades              Grade[]              @relation("GradedBy")
  gradeChanges        GradeChange[]        @relation("ChangedBy")
  reflectionResponses ReflectionResponse[]
  submissions         Submission[]
}

model Course {
  id          String             @id @default(cuid())
  code        String
  title       String
  description String?
  instructor  String
  semester    String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdById String
  assignments Assignment[]
  createdBy   User               @relation("CreatedBy", fields: [createdById], references: [id])
  enrollments CourseEnrollment[]

  @@unique([code, semester])
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  role       Role
  enrolledAt DateTime @default(now())
  userId     String
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model SkillTag {
  id                       String                    @id @default(cuid())
  name                     String
  category                 String
  description              String?
  createdAt                DateTime                  @default(now())
  reflectionResponseSkills ReflectionResponseSkill[]
  reflectionTemplateSkills ReflectionTemplateSkill[]
}

model Assignment {
  id                 String              @id @default(cuid())
  title              String
  description        String
  type               AssignmentType
  maxPoints          Int
  dueDate            DateTime
  instructions       Json?
  isPublished        Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  courseId           String
  createdById        String
  course             Course              @relation(fields: [courseId], references: [id])
  createdBy          User                @relation("CreatedBy", fields: [createdById], references: [id])
  reflectionTemplate ReflectionTemplate?
  submissions        Submission[]
}

model Submission {
  id                 String              @id @default(cuid())
  type               AssignmentType
  status             SubmissionStatus    @default(DRAFT)
  submittedAt        DateTime?
  content            String?
  files              Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  assignmentId       String
  studentId          String
  comments           Comment[]
  grade              Grade?
  reflectionResponse ReflectionResponse?
  assignment         Assignment          @relation(fields: [assignmentId], references: [id])
  student            User                @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
}

model Grade {
  id           String        @id @default(cuid())
  score        Float
  maxScore     Float
  feedback     String?
  gradedAt     DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  submissionId String        @unique
  gradedById   String
  gradedBy     User          @relation("GradedBy", fields: [gradedById], references: [id])
  submission   Submission    @relation(fields: [submissionId], references: [id])
  gradeChanges GradeChange[]
}

model GradeChange {
  id          String   @id @default(cuid())
  oldScore    Float
  newScore    Float
  reason      String
  changedAt   DateTime @default(now())
  gradeId     String
  changedById String
  changedBy   User     @relation("ChangedBy", fields: [changedById], references: [id])
  grade       Grade    @relation(fields: [gradeId], references: [id])
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  submissionId String
  userId       String
  parentId     String?
  parent       Comment?   @relation("CommentThread", fields: [parentId], references: [id])
  replies      Comment[]  @relation("CommentThread")
  submission   Submission @relation(fields: [submissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model ReflectionTemplate {
  id           String                    @id @default(cuid())
  prompts      Json
  dataToShow   Json
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  assignmentId String                    @unique
  responses    ReflectionResponse[]
  assignment   Assignment                @relation(fields: [assignmentId], references: [id])
  skillTags    ReflectionTemplateSkill[]
}

model ReflectionTemplateSkill {
  id         String             @id @default(cuid())
  templateId String
  skillTagId String
  skillTag   SkillTag           @relation(fields: [skillTagId], references: [id])
  template   ReflectionTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, skillTagId])
}

model ReflectionResponse {
  id             String                    @id @default(cuid())
  answers        Json
  needsHelp      Boolean                   @default(false)
  submittedAt    DateTime                  @default(now())
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  templateId     String
  studentId      String
  submissionId   String?                   @unique
  student        User                      @relation(fields: [studentId], references: [id])
  submission     Submission?               @relation(fields: [submissionId], references: [id])
  template       ReflectionTemplate        @relation(fields: [templateId], references: [id])
  selectedSkills ReflectionResponseSkill[]
}

model ReflectionResponseSkill {
  id         String             @id @default(cuid())
  responseId String
  skillTagId String
  response   ReflectionResponse @relation(fields: [responseId], references: [id])
  skillTag   SkillTag           @relation(fields: [skillTagId], references: [id])

  @@unique([responseId, skillTagId])
}

model ActivityLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  details    String
  timestamp  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  STUDENT
  TA
  PROFESSOR
  ADMIN
}

enum AssignmentType {
  FILE
  TEXT
  REFLECTION
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  LATE
}
